"use client"

import React, { useState, useEffect } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Loader2, Brain, MessageSquare, MemoryStick, Target, AlertCircle } from "lucide-react"
import { toast } from "sonner"
import { fetchTimelineEvents } from "@/lib/settings-api"
import { Badge } from "@/components/ui/badge"

interface TimelineEvent {
  id: string
  timestamp: Date | string
  type: string
  userId: string
  sessionId?: string
  description: string
  metadata?: Record<string, any>
}

const eventTypeVisuals: { [key: string]: { icon: React.ElementType, color: string } } = {
  interaction: { icon: MessageSquare, color: "text-blue-500 dark:text-blue-400" },
  memory_created: { icon: MemoryStick, color: "text-green-500 dark:text-green-400" },
  goal_updated: { icon: Target, color: "text-yellow-500 dark:text-yellow-400" },
  thought_added: { icon: Brain, color: "text-purple-500 dark:text-purple-400" },
  default: { icon: AlertCircle, color: "text-gray-500 dark:text-gray-400" },
}

export function AITimeline() {
  const [events, setEvents] = useState<TimelineEvent[]>([])
  const [isLoading, setIsLoading] = useState(true)

  useEffect(() => {
    async function fetchTimeline() {
      setIsLoading(true)
      try {
        const fetchedEvents = await fetchTimelineEvents(100)
        setEvents(
          fetchedEvents.sort(
            (a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime()
          ) || []
        )
      } catch (error: any) {
        console.error("Failed to fetch AI timeline:", error)
        toast.error("Failed to load AI timeline.", { description: error.message })
      } finally {
        setIsLoading(false)
      }
    }

    fetchTimeline()
  }, [])

  if (isLoading) {
    return (
      <Card className="dark:bg-gray-800 dark:border-gray-700">
        <CardHeader>
          <CardTitle className="dark:text-gray-100">AI Timeline</CardTitle>
          <CardDescription className="dark:text-gray-400">Recent activities and thoughts generated by the AI companion.</CardDescription>
        </CardHeader>
        <CardContent className="flex justify-center py-8">
          <Loader2 className="h-8 w-8 animate-spin text-amber-500" />
        </CardContent>
      </Card>
    )
  }

  return (
    <Card className="dark:bg-gray-800 dark:border-gray-700">
      <CardHeader>
        <CardTitle className="dark:text-gray-100">AI Timeline</CardTitle>
        <CardDescription className="dark:text-gray-400">Recent activities and thoughts generated by the AI companion.</CardDescription>
      </CardHeader>
      <CardContent className="space-y-4 max-h-[600px] overflow-y-auto pr-2">
        {events.length === 0 ? (
          <p className="text-gray-500 dark:text-gray-400 text-center py-6">No AI activity recorded yet.</p>
        ) : (
          events.map((event) => {
            const visual = eventTypeVisuals[event.type] || eventTypeVisuals.default
            const IconComponent = visual.icon
            return (
              <div key={event.id} className="flex items-start space-x-3 p-3 border-b dark:border-gray-700 last:border-b-0">
                <IconComponent className={`mt-1 h-5 w-5 ${visual.color}`} />
                <div className="flex-1 space-y-1">
                  <div className="flex items-center justify-between">
                    <h4 className="text-sm font-medium dark:text-gray-200">
                      {event.type.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase())}
                    </h4>
                    <p className="text-xs text-gray-500 dark:text-gray-400">
                      {new Date(event.timestamp).toLocaleString()}
                    </p>
                  </div>
                  <p className="text-sm text-gray-600 dark:text-gray-300">
                    {event.description}
                  </p>
                  {event.metadata && Object.keys(event.metadata).length > 0 && (
                    <div className="flex flex-wrap gap-1 pt-1">
                      {Object.entries(event.metadata).map(([key, value]) => (
                        <Badge key={key} variant="secondary" className="text-xs font-normal dark:bg-gray-700 dark:text-gray-300 dark:border-gray-600">
                          <span className="font-medium mr-1">{key}:</span>
                          {typeof value === 'string' || typeof value === 'number' ? value : JSON.stringify(value)}
                        </Badge>
                      ))}
                    </div>
                  )}
                </div>
              </div>
            )
          })
        )}
      </CardContent>
    </Card>
  )
}
